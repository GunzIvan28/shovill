#!/usr/bin/env perl
use strict;
use Data::Dumper;
use File::Path qw(make_path remove_tree);
use File::Spec;
use File::Copy;
use List::Util qw(min max);
use Cwd;
use File::Basename;
use Time::Piece;
use Time::Seconds;

# Globals
my $EXE = basename($0);
my $VERSION = "0.1";
my $URL = "https://github.com/tseemann/shovill";
my $AUTHOR = 'Torsten Seemann <torsten.seemann@gmail.com>';
my $OPSYS = $^O;
my $BAM = "$EXE.bam";
my %VALID_ASM = ('before_rr'=>1, 'contigs'=>1, 'scaffolds'=>1);
my $SUBREADS = 10_000;
my $MIN_K = 21;
my $MAX_K = 127;

# Say hello
msg("Hello", $ENV{USER} || 'stranger');
msg("This is $EXE $VERSION");
msg("Written by $AUTHOR");
msg("Homepage is $URL");
msg("Operating system is $OPSYS");
my $starttime = localtime;
msg("Local time is $starttime");
msg("You ran: $0 @ARGV");

# Options
my(@Options, $debug, $version, 
             $outdir, $force, $cpus, $tmpdir, $keepfiles,
             $kmers, $gsize, $R1, $R2, $opts,
             $nocorr, $asm, $minlen);
setOptions();

# Check options
-r $R1 or err("Can't read --R1 $R1");
-r $R2 or err("Can't read --R2 $R2");
#$gsize or err("Please provide estimated genome size --gsize");
#$gsize = guess_bp($gsize);
$cpus =~ m/^\d+$/ or err("Invalid --cpus");
my $lesscpus = min(1, max(4, int($cpus/4)));  # for samtools sort in pipe
$VALID_ASM{ $asm } or err( "Invalid --asm must be one of: ",join(' ', keys %VALID_ASM) );

# Check we have the required binaries
for my $exe (qw(seqtk KmerStream KmerStreamEstimate.py datamash lighter flash spades.py bwa samtools java pilon)) {
  my $fullexe = find_exe($exe);
  if ($fullexe) {
    msg("Using $exe - $fullexe");
  }
  else {
    err("Could not find '$exe' - please install it.");
  }
}

# Make output folder
make_folder($outdir);
$outdir = File::Spec->rel2abs($outdir);
$R1 = File::Spec->rel2abs($R1);
$R2 = File::Spec->rel2abs($R2);
#msg("R1: $R1");
#msg("R2: $R2");

msg("Changing into folder: $outdir");
my $cwd = getcwd();
chdir($outdir);
run_cmd("ln -s \Q$R1\E R1.fq.gz");
run_cmd("ln -s \Q$R2\E R2.fq.gz");

# Calculating read length distribution
msg("Estimating read lengths from first $SUBREADS");
run_cmd("seqtk sample R1.fq.gz $SUBREADS | paste - - - - | cut -f2 > readsample.txt");
open READSAMPLE, '<', 'readsample.txt';
my @len = sort { $a <=> $b } (map { length($_)-1 } <READSAMPLE>);
close READSAMPLE;
my $RLEN = $len[-1];
msg("Read length looks like $RLEN bp");
$MAX_K = min( $MAX_K, int(0.8 * $RLEN) );
msg("Setting maximum k-mer to $MAX_K");
if ($minlen == 0) {
  msg("Setting --minlen to $RLEN");
  $minlen = $RLEN
}

# Choosing some kmers
unless ($kmers) {
  my $kn = max(4, $cpus);
  my $ks = max(5, int( ($RLEN-$MIN_K) / $kn ) );
  $ks++ if $ks % 2 == 1; # need even step to ensure odd values only
  my @kmers;
  for (my $k=$MIN_K; $k < $MAX_K; $k+=$ks) {
    push @kmers, $k;
  }
  msg("Estimated K-mers: @kmers [kn=$kn, ks=$ks, kmin=$MIN_K, kmax=$MAX_K]");
  $kmers = join(',', @kmers);
}
msg("Using kmers: $kmers");

# Estimating genome size
unless ($gsize) {
  msg("Estimating genome size");
  run_cmd("KmerStream -k $kmers -o kmerstream-raw.tsv -t $cpus --tsv --verbose --online R1.fq.gz R2.fq.gz");
  run_cmd("KmerStreamEstimate.py kmerstream-raw.tsv > kmerstream-est.tsv");
  open GSIZE, '-|', "datamash --header-in median 7 < kmerstream-est.tsv";
  $gsize = int( <GSIZE> );
  chomp $gsize;
}
$gsize = guess_bp($gsize);
msg("Estimated genome size: $gsize bp");

# Correct reads
msg("Correcting reads with 'Lighter'");
run_cmd("lighter -od . -r R1.fq.gz -r R2.fq.gz -K 32 $gsize -t $cpus -maxcor 1 | tee lighter.log");

# Overlap reads
msg("Overlapping reads with 'FLASH'");
run_cmd("flash -d . -o flash -z -M 300 -t $cpus R1.cor.fq.gz R2.cor.fq.gz");

# Running Spades
msg("Running SPAdes");
run_cmd(
  "spades.py -1 flash.notCombined_1.fastq.gz -2 flash.notCombined_2.fastq.gz -s flash.extendedFrags.fastq.gz"
 ." --only-assembler --threads $cpus --memory 32 -o . --tmp-dir $tmpdir -k $kmers $opts"
);

# Correct contigs with Pilon
unless ($nocorr) {
  my $target = "$asm.fasta";
  -r $target or err("Can not see '$target' file to correct!");
  msg("Checking for assembly errors in $target");
  run_cmd("bwa index $target");
  run_cmd("bwa mem -v 3 -x intractg -t $cpus $target R1.fq.gz R2.fq.gz"
         ." | samtools sort --threads $lesscpus -m 4G --reference $target -T $tmpdir/samtools.$$ -o $BAM");
  run_cmd("samtools index $BAM");

  msg("Correcting errors in $target");
  run_cmd("pilon --genome $target --frags $BAM --output corrected --threads $cpus --changes --mindepth 0.5");
  move($target, "$target.uncorrected");
  move("corrected.fasta", $target);
}
else {
  msg("User supplied --nocorr, so not correcting contigs.");
}

# Write final answer with nicer names
my $ncontigs = 0;
my $nbases = 0;
my $seq = read_fasta("$asm.fasta");
my %len = map { ( $_ => length($seq->{$_}) ) } (keys %{$seq});
for my $id (sort { $len{$b} <=> $len{$a} } keys %{$seq}) {
  my $len = length($seq->{$id});
  if ($len < $minlen) {
    delete $seq->{$id};
  } 
  else {
    $ncontigs++;
    $nbases += $len;
    my $newid = sprintf "contig%05d %s", $ncontigs, $id;
    $seq->{$newid} = $seq->{$id};
    delete $seq->{$id};
  }
}
write_fasta("contigs.fa", $seq);

unless ($keepfiles) {
  # corrected, overlapped and symlinked original reads
  unlink glob("*q.gz");
  # BWA indices
  unlink glob("$asm.fasta.*");
  unlink $BAM, "$BAM.bai";
  # Spades Kmer folders
  remove_tree( map { "K$_" } split m/,/, $kmers );
  # other gumpf
  remove_tree( 'misc' );
  unlink glob("*.paths");
  unlink "params.txt", "dataset.info", "flash.histogram", "input_dataset.yaml";
}

msg("Returning to original folder: $cwd");
chdir($cwd);
msg("Results in: $outdir");
msg("Final assembly in: $outdir/contigs.fa");
msg("It contains $ncontigs (min=$minlen) contigs totalling $nbases bp."); 
# Say our goodbyes
my $endtime = localtime;
my $walltime = $endtime - $starttime;
my $pretty = sprintf "%.2f minutes", $walltime->minutes;
msg("Walltime used: $pretty");
#msg("If you use this result please cite the Shovill paper:");
#msg("Seemann T (2017) Shovill: rapid prokaryotic genome assembly. BioRxiv doi:XXXX-YYYY");
#msg("Type '$EXE --citation' for more details.");

my @motd = (
  "More correct contigs is better than fewer wrong contigs.",
  "A shovel will move more dirt than a spade.",
  "Wishing you a life free of misassemblies.",
  "Found a bug? Post it at $URL/issues",
  "Have a suggestion? Tell me at $URL/issues",
  "The $EXE Snippy manual is at $URL/blob/master/README.md",
  "Did you know? $EXE is a play on the words 'Spades' and 'Illumina'",
);
srand( $$ + $walltime + $MAX_K ); # seed
msg( $motd[ int(rand(scalar(@motd))) ] );
msg("Done.");

exit(0);

#----------------------------------------------------------------------
sub make_folder {
  my($outdir) = @_;
  if (-d $outdir) {
    if ($force) {
      msg("Forced removal of existing --outdir $outdir (please wait)");
      remove_tree($outdir);
    }
    else {
      err("Folder '$outdir' already exists. Try using --force");
    }
  }
  make_path($outdir);
}

#----------------------------------------------------------------------
sub guess_bp {
  my($s) = @_;
  my %mult = ('G'=>1E9,'M'=>1E6,'K'=>1E3);
  $s =~ m/^([\d\.]+)([GMK])?$/i or die "Couldn't parse '$s'";
  my $bp = $1;
  $bp = $bp * $mult{uc($2)} if defined $2;
  return $bp;
}

#----------------------------------------------------------------------
sub run_cmd {
  my($cmd, $quiet) = @_;
  msg("Running: $cmd") unless $quiet;
  system($cmd)==0 or err("Error $? running command");
}

#----------------------------------------------------------------------
sub find_exe {
  my($bin) = shift;
  for my $dir (File::Spec->path) {
    my $exe = File::Spec->catfile($dir, $bin);
    return $exe if -x $exe;
  }
  return;
}

#----------------------------------------------------------------------
sub msg {
  print STDERR "@_\n";
}
      
#----------------------------------------------------------------------
sub err {
  msg(@_);
  exit(1);
}

#----------------------------------------------------------------------
sub num_cpus {
  my($num)= qx(getconf _NPROCESSORS_ONLN); # POSIX
  chomp $num;
  return $num || 1;
}

#----------------------------------------------------------------------
sub version {
  print "$EXE $VERSION\n";
  exit(0);
}
   
#----------------------------------------------------------------------
sub read_fasta {
  my($fname) = @_;
  my $seq;
  my $id;
  open my $FASTA, '<', $fname or err("Could not open $fname");
  while (my $line = <$FASTA>) {
    chomp $line;
    if ($line =~ m/^>(\S+)/) {
      $id = $1;
      $seq->{$id} = '';
    }
    else {
      $seq->{$id} .= $line;
    }
  }
  close $FASTA;
  return $seq;
}

#----------------------------------------------------------------------
sub write_fasta {
  my($fname, $seq) = @_;
  open my $FASTA, '>', $fname or err("Could not write to $fname");
  for my $id (sort { $a cmp $b } keys %{$seq}) {
    print $FASTA ">$id\n", $seq->{$id}, "\n";
  }
  close $FASTA;
}
   
#----------------------------------------------------------------------
# Option setting routines

sub setOptions {
  use Getopt::Long;

  @Options = (
    {OPT=>"help",    VAR=>\&usage,             DESC=>"This help"},
    {OPT=>"debug!",  VAR=>\$debug, DEFAULT=>0, DESC=>"Debug info"},
    {OPT=>"version!",  VAR=>\&version, DESC=>"Print version and exit"},
    {OPT=>"cpus=i",  VAR=>\$cpus, DEFAULT=>min(16, num_cpus()), DESC=>"Number of CPUs to use"},
    {OPT=>"outdir=s",  VAR=>\$outdir, DEFAULT=>'', DESC=>"Output folder"},
    {OPT=>"force!",  VAR=>\$force, DEFAULT=>0, DESC=>"Force overwite of existing"},
    {OPT=>"R1=s",  VAR=>\$R1, DEFAULT=>'', DESC=>"Read 1 FASTQ"},
    {OPT=>"R2=s",  VAR=>\$R2, DEFAULT=>'', DESC=>"Read 2 FASTQ"},
    {OPT=>"gsize=s",  VAR=>\$gsize, DEFAULT=>'', DESC=>"Estimated genome size (blank=AUTO)"},
    {OPT=>"kmers=s",  VAR=>\$kmers, DEFAULT=>'', DESC=>"K-mers to use <blank=AUTO>"},
    {OPT=>"opts=s",  VAR=>\$opts, DEFAULT=>'', DESC=>"Extra SPAdes options eg. --plasmid --careful ..."},
    {OPT=>"nocorr!",  VAR=>\$nocorr, DEFAULT=>0, DESC=>"Disable post-assembly correction"},
    {OPT=>"minlen=i",  VAR=>\$minlen, DEFAULT=>0, DESC=>"Minimum contig length <0=AUTO>"},
    {OPT=>"asm=s",  VAR=>\$asm, DEFAULT=>'contigs', DESC=>"Spades result to correct: before_rr contigs scaffolds"},
    {OPT=>"tmpdir=s",  VAR=>\$tmpdir, DEFAULT=>$ENV{TMPDIR} || '/tmp', DESC=>"Fast temporary directory"},
    {OPT=>"keepfiles!",  VAR=>\$keepfiles, DEFAULT=>0, DESC=>"Keep intermediate files"},
  );

  (!@ARGV) && (usage());

  &GetOptions(map {$_->{OPT}, $_->{VAR}} @Options) || usage();

  # Now setup default values.
  foreach (@Options) {
    if (defined($_->{DEFAULT}) && !defined(${$_->{VAR}})) {
      ${$_->{VAR}} = $_->{DEFAULT};
    }
  }
}

sub usage {
  my $EXE = $0;
  $EXE =~ s{^.*/}{};
  print "Usage:\n  $EXE [options] --outdir DIR --R1 R1.fq.gz --R2 R2.fq.gz\n";
  print "Options:\n";
  foreach (@Options) {
    printf "  --%-13s %s%s.\n",$_->{OPT},$_->{DESC},
           defined($_->{DEFAULT}) ? " (default '$_->{DEFAULT}')" : "";
  }
  exit(1);
}
 
#----------------------------------------------------------------------
